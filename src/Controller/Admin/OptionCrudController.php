<?php

namespace App\Controller\Admin;

use App\Entity\Option;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Collection\EntityCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\KeyValueStore;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\HiddenField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\FormInterface;

class OptionCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Option::class;
    }

    public function index(AdminContext $context)
    {
        $res = parent::index($context);

        if ($res instanceof KeyValueStore) {
            /** @var EntityCollection $entities */
            $entities = $res->get('entities');

            foreach ($entities as $entity) {
                $fields = $entity->getFields();
                $fields->unset($fields->getByProperty('type'));
            }
        }

        return $res;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityPermission('ROLE_ADMIN')
            ->setSearchFields(null)
            ->setEntityLabelInPlural('Options générales')
            ->showEntityActionsInlined()
        ;
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->remove(Crud::PAGE_INDEX, Action::BATCH_DELETE)
            ->remove(Crud::PAGE_INDEX, Action::DELETE)
            ->remove(Crud::PAGE_INDEX, Action::NEW)
        ;
    }

    public function configureFields(string $pageName): iterable
    {
        yield TextField::new('label', 'Option')->setFormTypeOption('attr', ['readonly' => true]);
        yield TextField::new('value');
        yield HiddenField::new('type');
    }

    public function createEditForm(EntityDto $entityDto, KeyValueStore $formOptions, AdminContext $context): FormInterface
    {
        $formBuilder = parent::createEditForm($entityDto, $formOptions, $context); // TODO: Change the autogenerated stub

        /** @var Option $option */
        $option = $formBuilder->getViewData();

        $val = $option->getValue();
        $type = $option->getType();

        $formBuilder->add('value', $type, [
            'data' => $type === CheckboxType::class ? boolval($val) : $val,
            'required' => false
        ]);

        return $formBuilder;
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        /** @var Option $entityInstance */
        if ($entityInstance->getType() === CheckboxType::class) {
            $entityInstance->setValue($entityInstance->getValue() ? '1' : '0');
        }
        parent::updateEntity($entityManager, $entityInstance);
    }
}
